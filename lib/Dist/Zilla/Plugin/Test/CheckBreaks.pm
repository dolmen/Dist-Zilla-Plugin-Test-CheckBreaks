use strict;
use warnings;
package Dist::Zilla::Plugin::Test::CheckBreaks;
# ABSTRACT: Generate a test that shows your conflicting modules
# vim: set ts=8 sw=4 tw=78 et :

use Moose;
with (
    'Dist::Zilla::Role::FileGatherer',
    'Dist::Zilla::Role::FileMunger',
    'Dist::Zilla::Role::TextTemplate',
);
use Module::Metadata;
use Path::Tiny;
use namespace::autoclean;

sub filename { path('t', 'zzz-check-breaks.t') }

sub gather_files
{
    my $self = shift;

    require Dist::Zilla::File::InMemory;

    $self->add_file( Dist::Zilla::File::InMemory->new(
        name => $self->filename->stringify,
        content => <<'TEST',
use strict;
use warnings;

# this test was generated with {{ ref($plugin) . ' ' . ($plugin->VERSION || '<self>') }}

use Test::More;

eval { require {{ $module }}; {{ $module }}->check_conflicts };
diag $@ if $@;

pass 'conflicts checked via {{ $module }}';

done_testing;
TEST
    ));
}

has conflicts_module => (
    is => 'ro', isa => 'Str',
    lazy => 1,
    default => sub {
        my $self = shift;

        # TODO: use Dist::Zilla::Role::ModuleMetadata
        my $file = $self->zilla->main_module;
        open my $fh, sprintf('<encoding(%s)', $file->encoding), \$file->encoded_content
            or $self->log_fatal('cannot open handle to ' . $file->name . ' content: ' . $!);

        my $mmd = Module::Metadata->new_from_handle($fh, $file->name);
        my $module = ($mmd->packages_inside)[0] . '::Conflicts';
    },
);

sub munge_file
{
    my ($self, $file) = @_;

    return unless $file->name eq $self->filename;

    $file->content(
        $self->fill_in_string(
            $file->content,
            {
                dist => \($self->zilla),
                plugin => \$self,
                module  => \($self->conflicts_module),
            }
        )
    );

    return;
}

__PACKAGE__->meta->make_immutable;

=pod

=head1 SYNOPSIS

In your F<dist.ini>:

    [CheckBreaks]
    conflicts_module = Moose::Conflicts

=head1 DESCRIPTION

This is a L<Dist::Zilla> plugin that runs at the
L<gather files|Dist::Zilla::Role::FileGatherer> stage, providing a test file
that runs last in your test suite and checks for conflicting modules, as
calculated by L<Dist::CheckConflicts>.

=head1 CONFIGURATION

=head2 C<conflicts_module>

The name of the conflicts module to load and invoke the C<check_conflicts>
method on. Defaults to the name of the main module with C<::Conflicts>
appended, such as what is generated by the
L<[Conflicts]|Dist::Zilla::Plugin::Conflicts> plugin.

Dies if the module is not loadable.

If your distribution uses L<Moose> but does not itself generate a conflicts
plugin, then C<Moose::Conflicts> is an excellent choice, as there are numerous
interoperability conflicts catalogued in that module.

=head1 FUTURE PLANS

Make direct use of the C<x_breaks> meta field; check for issues directly.

=head1 SEE ALSO

=over 4

=item * L<Dist::CheckConflicts>

=item * L<The Annotated Lancaster Consensus|http://www.dagolden.com/index.php/2098/the-annotated-lancaster-consensus/>
at "Improving on 'conflicts'"

=back

=cut
